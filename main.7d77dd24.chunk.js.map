{"version":3,"sources":["DisplayPanel.js","Tab.js","MapContainer.js","TabsPanel.js","SelectComponent.js","WeatherApp.js","serviceWorker.js","index.js"],"names":["DisplayPanel","props","renderContent","bind","content","this","value","className","Temperature","Humidity","Wind","AirPressure","Forcast","React","Component","moment","require","Tabs","state","display","renderTabs","tabOnClick","newDate","Date","setTime","imgUrl","class","src","format","onTabClick","tabId","onClick","MapContainer","renderMap","google","zoom","style","width","height","initialCenter","lat","lng","long","center","position","GoogleApiWrapper","apiKey","TabsPanel","activeTab","renderDisplayPanel","setState","length","SelectComponent","selectedIndex","onChange","renderTabPanel","event","apiContent","self","indexValue","nativeEvent","target","index","url","fetch","then","maps","json","results","geometry","location","response","response1","dailyData","list","filter","reading","dt_txt","includes","i","dic","main","temp","humidity","dt","wind","speed","pressure","weather","description","push","defaultValue","WeatherApp","SelectComponentState","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7d77dd24.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Tabs from './TabsPanel';\r\nimport TabsPanel from './TabsPanel';\r\nimport './Display.css'\r\n\r\n\r\n//This class displays all the weather data points.\r\nclass DisplayPanel extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.renderContent = this.renderContent.bind(this);\r\n\r\n    }\r\n\r\n//function that displays all the  weather data points in the table.\r\n    renderContent() {\r\n\r\n        var content = { ...this.props.value }\r\n        return (\r\n            <div className=\"display-div\">\r\n                <table>\r\n                    <h3>\r\n                        <tr><td>Temperature:</td> <td>{content.Temperature}</td></tr>\r\n                    </h3>\r\n                    <h3>\r\n                        <tr><td>Humidity:</td> <td>{content.Humidity}</td></tr>\r\n                    </h3>\r\n                    <h3>\r\n                        <tr><td>Wind:</td> <td>{content.Wind}</td></tr>\r\n                    </h3>\r\n                    <h3>\r\n                        <tr><td>AirPressure:</td> <td>{content.AirPressure}</td></tr>\r\n                    </h3>\r\n                    <h3>\r\n                        <tr><td>Forecast:</td> <td>{content.Forcast}</td></tr>\r\n                    </h3>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n\r\n//rendering the renderContent function to display the data points.\r\n    render() {\r\n        return (\r\n            <div>\r\n                {\r\n                    this.renderContent()\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default DisplayPanel;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Img from 'react-image';\r\nimport Moment from 'react-moment';\r\nimport 'moment-timezone';\r\nimport DisplayPanel from './DisplayPanel';\r\nimport './Tab.css'\r\nvar moment = require('moment');\r\n\r\n//This class fills up all the tabs represented as images .\r\n//Usage of moment.js in this class for formatting the dates.\r\nclass Tabs extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            display: false,\r\n            content: {}\r\n\r\n\r\n        }\r\n        this.renderTabs = this.renderTabs.bind(this);\r\n\r\n        this.tabOnClick = this.tabOnClick.bind(this);\r\n\r\n    }\r\n\r\n//Function that fills tabs with images and formats the date\r\n    renderTabs() {\r\n        let newDate = new Date();\r\n        newDate.setTime({ ...this.props.value }.Date * 1000)\r\n\r\n        let imgUrl = \"\";\r\n        switch ({ ...this.props.value }.Forcast) {\r\n            case \"few clouds\":\r\n            case \"scattered clouds\":\r\n            case \"few clouds\":\r\n            case \"broken clouds\":\r\n            case \"overcast clouds\":\r\n                imgUrl = 'https://media.giphy.com/media/Ke7i5t6QDmDSO82Uga/giphy.gif'\r\n\r\n                break;\r\n\r\n            case \"light rain\":\r\n            case \"moderate rain\":\r\n                imgUrl = 'https://media.giphy.com/media/3oKIPstwMF15FghbYQ/giphy.gif'\r\n                break;\r\n            case \"clear sky\":\r\n                imgUrl = 'https://media.giphy.com/media/xM8CKTlDAN5Xa/giphy.gif'\r\n                break;\r\n\r\n            case \"light snow\":\r\n                imgUrl ='https://media.giphy.com/media/bnH2hkYp97rGM/giphy.gif'\r\n                 break;\r\n\r\n            default:\r\n\r\n                imgUrl = 'https://media.giphy.com/media/xM8CKTlDAN5Xa/giphy.gif'\r\n                break;\r\n        }\r\n\r\n        return (\r\n            <div className=\"tab-div\">\r\n                <div class=\"img-div\">\r\n                    <Img src={imgUrl} className=\"images\" />\r\n                </div>\r\n                <div className=\"date-tab\">\r\n                    <h3 className=\"card-title\">{moment(newDate).format('ddd')}</h3>\r\n                    <h3 className=\"text-muted\">{moment(newDate).format('MMM Do')}</h3>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n//function for  click on tabs\r\n    tabOnClick() {\r\n        this.props.onTabClick(this.props.tabId)\r\n    }\r\n\r\n\r\n//rendering and returning the clickable tabs.\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div onClick={this.tabOnClick}>\r\n                    {\r\n                        this.renderTabs()\r\n                    }\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Tabs;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Map, GoogleApiWrapper, Marker } from 'google-maps-react';\r\n\r\n//This class shows the MAP setup . The lat and longs values are passed from props that has its values.\r\nconst Balloon = () => <img width=\"25\" src='https://www.speedwaymiracletournament.com/' />;\r\nclass MapContainer extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.renderMap = this.renderMap.bind(this)\r\n\r\n  }\r\n\r\n//setting the maps\r\n  renderMap() {\r\n\r\n\r\n    const mapStyles = {\r\n      width: '40%',\r\n      height: '42%',\r\n    };\r\n    return (\r\n      <Map className=\"mapsize\"\r\n        google={this.props.google}\r\n        zoom={6}\r\n        style={mapStyles}\r\n        initialCenter={{ lat: this.props.lat, lng: this.props.long }}\r\n        center={{ lat: this.props.lat, lng: this.props.long }}\r\n      >\r\n        <Marker position={{ lat: this.props.lat, lng: this.props.long }} />\r\n      </Map>\r\n    );\r\n\r\n  }\r\n//rendering and returning the renderMap function to display on Div\r\n  render() {\r\n    return (\r\n      <div>{\r\n        this.renderMap()\r\n      }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GoogleApiWrapper({\r\n  apiKey: 'AIzaSyClTqcMNpFm9_rFaaXH6ptzDpmTmAEwml4'\r\n})(MapContainer);\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Tabs from './Tab';\r\nimport DisplayPanel from './DisplayPanel';\r\nimport MapContainer from './MapContainer';\r\nimport './TabsPanel.css'\r\n\r\n//class for Tabs Panel.This class is creating a structure for tabs and a map .\r\n//Binding the onclick events.\r\nclass TabsPanel extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            activeTab: 0\r\n        }\r\n\r\n        this.renderDisplayPanel = this.renderDisplayPanel.bind(this);\r\n        this.onTabClick = this.onTabClick.bind(this);\r\n    }\r\n//this function is setting the state of activetab as tab id's.\r\n    onTabClick(tabId) {\r\n        this.setState({ activeTab: tabId });\r\n    }\r\n//this function is setting the value of DisplayPanel \r\n    renderDisplayPanel() {\r\n\r\n        if (this.props.value.length > 0) {\r\n            return (\r\n                <div>\r\n\r\n                    <DisplayPanel value={this.props.value[this.state.activeTab]} />\r\n\r\n                </div>\r\n\r\n            );\r\n        }\r\n        else {\r\n            return <div />\r\n        }\r\n    }\r\n//rendering all the tabs panel value along with on click functionality\r\n    render() {\r\n        if (this.props.value.length > 0) {\r\n            return (\r\n\r\n                <div className=\"tabpanel-row\">\r\n                    <div className=\"tabpanel-columns\">\r\n                        <Tabs value={this.props.value[0]} onTabClick={this.onTabClick} tabId={0} />\r\n                    </div>\r\n                    <div className=\"tabpanel-columns\">\r\n                        <Tabs value={this.props.value[1]} onTabClick={this.onTabClick} tabId={1} />\r\n                    </div>\r\n                    <div className=\"tabpanel-columns\">\r\n                        <Tabs value={this.props.value[2]} onTabClick={this.onTabClick} tabId={2} />\r\n                    </div>\r\n                    <div className=\"tabpanel-columns\">\r\n                        <Tabs value={this.props.value[3]} onTabClick={this.onTabClick} tabId={3} />\r\n                    </div>\r\n                    <div className=\"tabpanel-columns\">\r\n                        <Tabs value={this.props.value[4]} onTabClick={this.onTabClick} tabId={4} />\r\n                    </div>\r\n\r\n                    <div className=\"displaypanel-div\">\r\n                        {\r\n                            this.renderDisplayPanel()\r\n                        }</div>\r\n                    <div className=\"map-div\">\r\n\r\n                        <MapContainer lat={{ ...this.props.value[0] }.lat} long={{ ...this.props.value[0] }.long} />\r\n                    </div>\r\n\r\n                </div >\r\n\r\n            );\r\n        }\r\n        else {\r\n            return <div></div>;\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n\r\nexport default TabsPanel;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport TabsPanel from './TabsPanel';\r\nimport Tab from './Tab';\r\n\r\n\r\n// This class represents the select option tags along with doing the Maps API calling and OpeanWeather API calling.\r\n//Binding of on click events in constructor.\r\n//Map API is first taking ZIP codes values to provide the latitutdes \r\n//and longitudes which then is used in Google maps to show the locations.\r\nclass SelectComponent extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            content: [],\r\n            selectedIndex: -1\r\n        }\r\n        this.onChange = this.onChange.bind(this);\r\n        this.renderTabPanel = this.renderTabPanel.bind(this);\r\n\r\n    }\r\n//This function does the API calling for maps and openweather API and fetches the data \r\n    onChange(event) {\r\n        let apiContent = [];\r\n        let self = this;\r\n        let indexValue = event.nativeEvent.target.selectedIndex;\r\n        let index = event.nativeEvent.target[indexValue].value;\r\n        let lat = \"\";\r\n        let long = \"\";\r\n        let url = \"https://api.openweathermap.org/data/2.5/forecast?zip=\" + index + \"&units=imperial&APPID=cc416c026550bcc9427d02b9f040c896\"\r\n        fetch(\"https://maps.googleapis.com/maps/api/geocode/json?address=\" + index + \"&key=AIzaSyClTqcMNpFm9_rFaaXH6ptzDpmTmAEwml4\")\r\n            .then(maps => maps.json())\r\n            .then(maps => {\r\n                lat = maps.results[0].geometry.location.lat; long = maps.results[0].geometry.location.lng;\r\n                fetch(url)\r\n                    .then(response => response.json())\r\n                    .then((response1) => {\r\n\r\n                        const dailyData = response1.list.filter(reading => reading.dt_txt.includes(\"18:00:00\"))\r\n\r\n\r\n                        for (let i = 0; i < dailyData.length; i++) {\r\n\r\n\r\n                            var dic = {};\r\n                            dic.Temperature = dailyData[i].main.temp + \"°F\";\r\n                            dic.Humidity = dailyData[i].main.humidity;\r\n                            dic.Date = dailyData[i].dt;\r\n                            dic.Wind = dailyData[i].wind.speed + \" km/hr\";\r\n                            dic.AirPressure = dailyData[i].main.pressure + \" hPa\";\r\n                            dic.Forcast = dailyData[i].weather[0].description;\r\n                            dic.lat = lat;\r\n                            dic.long = long;\r\n                            apiContent.push(dic);\r\n                        }\r\n\r\n\r\n                        self.setState({\r\n                            content: apiContent,\r\n                            selectedIndex: indexValue\r\n\r\n                        }\r\n\r\n                        )\r\n                    })\r\n            })\r\n    }\r\n\r\n//Function for rendering the tabspanels.\r\n    renderTabPanel() {\r\n        var display = false;\r\n\r\n        return (\r\n            <TabsPanel value={this.state.content} />\r\n        );\r\n    }\r\n\r\n\r\n//rendering all the select option and calling the render tab panel function .\r\n    render() {\r\n\r\n\r\n        return (\r\n\r\n            <div>\r\n                {\r\n                    <select defaultValue=\"Search...\" onChange={this.onChange}>\r\n                        <option value=\"\">Choose the Cities</option>\r\n                        <option value=\"02122\" >Boston</option>\r\n                        <option value=\"98101\">Seattle</option>\r\n                        <option value=\"92602\">Irvine</option>\r\n                        <option value=\"14623\">Rochester</option>\r\n                        <option value=\"90712\">LongBeach</option>\r\n                        <option value=\"10090\">New York City</option>\r\n                        <option value=\"85004\">Phoenix</option>\r\n                    </select>\r\n                }\r\n\r\n\r\n                {\r\n                    this.renderTabPanel()\r\n                }\r\n\r\n\r\n            </div>\r\n\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default SelectComponent;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport SelectComponent from './SelectComponent';\r\n\r\n\r\n//Main class --the start of the project\r\n\r\nclass WeatherApp extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            SelectComponentState: null\r\n        }\r\n\r\n    }\r\n\r\n\r\n// rendering and returning the SelectComponent class\r\n    render() {\r\n\r\n\r\n        return (\r\n            <form>\r\n                <h1>This Week's Weather</h1>\r\n                <div className=\"select-component\">\r\n                    <SelectComponent /> \r\n\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default WeatherApp;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport WeatherApp from './WeatherApp';\nimport * as serviceWorker from './serviceWorker';\n\n//renders weatherApp (the main class)\nReactDOM.render(<WeatherApp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}